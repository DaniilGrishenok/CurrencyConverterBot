package com.rhythmpoizon.currencyconverterbot.service;

import com.rhythmpoizon.currencyconverterbot.botapi.handlers.InfoCommandHandler;
import com.rhythmpoizon.currencyconverterbot.botapi.handlers.ManagerCommandHandler;
import com.rhythmpoizon.currencyconverterbot.botapi.handlers.PriceCommandHandler;
import com.rhythmpoizon.currencyconverterbot.botapi.handlers.CurrencyCommandHandler;
import com.rhythmpoizon.currencyconverterbot.config.BotConfig;
import com.rhythmpoizon.currencyconverterbot.model.User;
import com.rhythmpoizon.currencyconverterbot.model.UserRepository;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.sql.Timestamp;
import java.util.*;

import static com.rhythmpoizon.currencyconverterbot.botapi.handlers.PriceCommandHandler.TEXT_PRICE;


@Slf4j
@Component
public class TelegramBot  extends TelegramLongPollingBot {
    @Autowired
    private UserRepository userRepository;
    @Lazy
    @Autowired
    PriceCommandHandler priceCommandHandler;

    @Lazy
    @Autowired
    CurrencyCommandHandler currencyCommandHendler;

    @Lazy
    @Autowired
    InfoCommandHandler infoCommandHandler;
    @Lazy
    @Autowired
    ManagerCommandHandler managerCommandHandler;
    final BotConfig config;

    public TelegramBot(BotConfig config) {
        this.config = config;
    }
    String photoFilePath = "src/main/resources/static/images/photo_2023-10-07_22-11-01.jpg";
    // –£–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
    static final String WELCOME_TEXT = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä POIZON! üåü\n\n" +
            "–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –º—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º –≤ —ç—Ç–æ–º! üõíüíº\n\n" +
            "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞–º –∑–∞ –ø–æ–º–æ—â—å—é! –ú—ã - –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –º–∏—Ä–µ –º–æ–¥—ã –∏ —à–æ–ø–∏–Ω–≥–∞ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ POIZON. ü§ù‚ú®\n\n" +
            "POIZON - —ç—Ç–æ –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–¥–µ–∂–¥—ã, –æ–±—É–≤–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –≤ –ö–∏—Ç–∞–µ. –ú—ã –ø–æ–º–æ–≥–∞–µ–º –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –ö–∏—Ç–∞—è –≤ –†–æ—Å—Å–∏—é. –í–∞—à –∫–æ–º—Ñ–æ—Ä—Ç –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –Ω–∞–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å—Ç–∏–ª—å–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏!\n\n" +
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –æ–ø—ã—Ç —Å POIZON –ø—Ä–∏—è—Ç–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º. üíºüåç";
    private Map<Long, BotState> chatStates = new HashMap<>();

    @SneakyThrows
    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            if (messageText.equals("/start") ||
                messageText.equals("hello") ||
                messageText.equals("–ø—Ä–∏–≤–µ—Ç")) {
                handleStartCommand(update.getMessage());
                //sendPhotoToChat(chatId,WELCOME_TEXT,photoFilePath);

            } else if (messageText.equals("/currency") ||
                       messageText.equals("\uD83C\uDDE8\uD83C\uDDF3 \u00A5 –ö—É—Ä—Å –Æ–∞–Ω—è")||
                       messageText.equals("–∫—É—Ä—Å")) {
                currencyCommandHendler.handleCurrencyCommand(chatId);
                chatStates.remove(chatId);

            } else if (messageText.equals("/info") ||
                      (messageText.equals("‚ùì FAQ"))) {
                infoCommandHandler.handleInfoCommand(chatId);
                chatStates.remove(chatId);

            } else if (messageText.equals("/manager")||
                       messageText.equals("–∑–∞–∫–∞–∑") ||
                       messageText.equals("\uD83D\uDECD –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑") ) {
                managerCommandHandler.handleManagerCommand(chatId);
                chatStates.remove(chatId);

            } else if (messageText.equals("/delivery")||
                       messageText.equals("\uD83D\uDE9A –î–æ—Å—Ç–∞–≤–∫–∞")) {
                infoCommandHandler.handleDeliveryCommand(chatId);
                chatStates.remove(chatId);

            }
            else if (messageText.equals("/dima")) {
             sendMessage(965052217, "–ü—Ä–∏–≤–µ—Ç –î–∏–º–∞");

            }
           else if (messageText.equals("/price")||
                    messageText.equals("\uD83D\uDCB8 –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω")) {
                if (chatStates.get(chatId) == BotState.WAITING_FOR_PRICE) {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–Ω—ã, –∏ –º—ã –æ–∂–∏–¥–∞–µ–º –æ—Ç –Ω–µ–≥–æ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã.
                    try {
                        double priceInYuan = Double.parseDouble(messageText);
                        priceCommandHandler.handlePriceCommand(chatId, priceInYuan);
                        // –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        chatStates.remove(chatId);
                    } catch (NumberFormatException e) {
                        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —á–∏—Å–ª–æ–≤—É—é —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö.");
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                } else {
                    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /price, –Ω–æ –±–æ—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç —Ü–µ–Ω—É, –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–Ω—ã
                    chatStates.put(chatId, BotState.WAITING_FOR_PRICE);
                    sendPhotoToChat(chatId,TEXT_PRICE,photoFilePath);
                }
            } else {
                if (chatStates.containsKey(chatId) && chatStates.get(chatId) == BotState.WAITING_FOR_PRICE) {
                    // –ï—Å–ª–∏ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Ü–µ–Ω—É
                    try {
                        double priceInYuan = Double.parseDouble(messageText);
                        priceCommandHandler.handlePriceCommand(chatId, priceInYuan);
                        chatStates.remove(chatId);
                    } catch (NumberFormatException e) {
                        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ –Æ–∞–Ω—è—Ö.");
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                } else {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                    handleMessage(chatId, messageText);
                }
            }
        }
    }


    private void handleMessage(long chatId, String messageText) {
        sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª( \n " +
                "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –≤—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é.  \n" +
                "–ï—Å–ª–∏ —Å—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥ –Ω–µ—Ç –Ω—É–∂–Ω–æ–π –¥–ª—è –≤–∞—Å –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É /manager ");
    }


    public void sendPhotoToChat(long chatId, String photoCaption, String photoFilePath) {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç SendPhoto
        SendPhoto sendPhoto = new SendPhoto();
        sendPhoto.setChatId(String.valueOf(chatId)); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
        sendPhoto.setCaption(photoCaption); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InputFile –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        InputFile photoInputFile = new InputFile(new File(photoFilePath));

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        sendPhoto.setPhoto(photoInputFile);

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            execute(sendPhoto);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    // –í–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    private void handleStartCommand(Message message) {

        String START_TEXT = "";
        long chatId;
        chatId = message.getChatId();
        SendMessage response = new SendMessage();
        response.setChatId(String.valueOf(chatId));
        response.enableHtml(true);

        response.setText("\uD83C\uDFE0 –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        response.setReplyMarkup(createKeyboard());
        registerUser(message);
        try {
            execute(response);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    private ReplyKeyboardMarkup createKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true); // –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —ç–∫—Ä–∞–Ω
        keyboardMarkup.setOneTimeKeyboard(false); // –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("\uD83D\uDCB8 –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω");
        row1.add("\uD83C\uDDE8\uD83C\uDDF3 \u00A5 –ö—É—Ä—Å –Æ–∞–Ω—è");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("\uD83D\uDECD –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑");
        row2.add("\uD83D\uDE9A –î–æ—Å—Ç–∞–≤–∫–∞");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("‚ùì FAQ");

        keyboardRows.add(row1);
        keyboardRows.add(row2);
        keyboardRows.add(row3);
        keyboardMarkup.setKeyboard(keyboardRows);
        return keyboardMarkup;
    }

    public void sendMessage(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);
        message.enableHtml(true);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public String getBotToken() {
        return config.getToken();
    }
    @Override
    public void onRegister() {
        super.onRegister();
    }
    private void registerUser(Message msg) {

        if (userRepository.findById(msg.getChatId()).isEmpty()) {

            var chatId = msg.getChatId();
            var chat = msg.getChat();

            User user = new User();

            user.setChatId(chatId);
            user.setFirstName(chat.getFirstName());
            user.setLastName(chat.getLastName());
            user.setUserName(chat.getUserName());
            user.setRegistredAt(new Timestamp(System.currentTimeMillis()));

            userRepository.save(user);
            log.info("user saved: " + user);
        }
    }
}
